const { query } = require('../config/database');

/**
 * Script ƒë·ªÉ ki·ªÉm tra mapping gi·ªØa giao di·ªán Tour Edit v√† database tables
 */
class TourEditMappingChecker {
  constructor() {
    this.tables = [];
    this.mapping = {
      tourInfo: {},
      hotelInfo: {},
      flightInfo: {}
    };
  }

  /**
   * L·∫•y danh s√°ch t·∫•t c·∫£ tables
   */
  async getAllTables() {
    try {
      const result = await query(`
        SELECT table_name
        FROM information_schema.tables 
        WHERE table_schema = 'public'
        ORDER BY table_name
      `);
      
      this.tables = result.rows.map(row => row.table_name);
      console.log(`üìä Found ${this.tables.length} tables in database`);
      
      return this.tables;
    } catch (error) {
      console.error('‚ùå Error getting tables:', error.message);
      return [];
    }
  }

  /**
   * Ki·ªÉm tra c·∫•u tr√∫c c√°c b·∫£ng li√™n quan ƒë·∫øn tour
   */
  async checkTourRelatedTables() {
    console.log('\nüîç Checking tour-related tables structure...\n');
    
    const tourTables = ['services', 'service_details_tour', 'service_variants', 'service_images', 'service_availabilities'];
    
    for (const tableName of tourTables) {
      if (this.tables.includes(tableName)) {
        try {
          const result = await query(`
            SELECT column_name, data_type, is_nullable, column_default
            FROM information_schema.columns 
            WHERE table_name = $1
            ORDER BY ordinal_position
          `, [tableName]);
          
          console.log(`üìã Table: ${tableName}`);
          console.log(`   Columns (${result.rows.length}):`);
          result.rows.forEach(col => {
            console.log(`     - ${col.column_name}: ${col.data_type} ${col.is_nullable === 'YES' ? '(nullable)' : '(not null)'}`);
          });
          console.log('');
          
        } catch (error) {
          console.log(`   ‚ùå Error checking ${tableName}: ${error.message}`);
        }
      } else {
        console.log(`‚ö†Ô∏è  Table ${tableName} not found in database`);
      }
    }
  }

  /**
   * Ki·ªÉm tra c·∫•u tr√∫c c√°c b·∫£ng li√™n quan ƒë·∫øn hotel
   */
  async checkHotelRelatedTables() {
    console.log('\nüè® Checking hotel-related tables structure...\n');
    
    const hotelTables = ['service_details_hotel', 'service_details_hotel_room', 'roomtypes', 'providers'];
    
    for (const tableName of hotelTables) {
      if (this.tables.includes(tableName)) {
        try {
          const result = await query(`
            SELECT column_name, data_type, is_nullable, column_default
            FROM information_schema.columns 
            WHERE table_name = $1
            ORDER BY ordinal_position
          `, [tableName]);
          
          console.log(`üìã Table: ${tableName}`);
          console.log(`   Columns (${result.rows.length}):`);
          result.rows.forEach(col => {
            console.log(`     - ${col.column_name}: ${col.data_type} ${col.is_nullable === 'YES' ? '(nullable)' : '(not null)'}`);
          });
          console.log('');
          
        } catch (error) {
          console.log(`   ‚ùå Error checking ${tableName}: ${error.message}`);
        }
      } else {
        console.log(`‚ö†Ô∏è  Table ${tableName} not found in database`);
      }
    }
  }

  /**
   * Ki·ªÉm tra c·∫•u tr√∫c c√°c b·∫£ng li√™n quan ƒë·∫øn flight
   */
  async checkFlightRelatedTables() {
    console.log('\n‚úàÔ∏è Checking flight-related tables structure...\n');
    
    const flightTables = ['service_details_flight', 'routes', 'airports'];
    
    for (const tableName of flightTables) {
      if (this.tables.includes(tableName)) {
        try {
          const result = await query(`
            SELECT column_name, data_type, is_nullable, column_default
            FROM information_schema.columns 
            WHERE table_name = $1
            ORDER BY ordinal_position
          `, [tableName]);
          
          console.log(`üìã Table: ${tableName}`);
          console.log(`   Columns (${result.rows.length}):`);
          result.rows.forEach(col => {
            console.log(`     - ${col.column_name}: ${col.data_type} ${col.is_nullable === 'YES' ? '(nullable)' : '(not null)'}`);
          });
          console.log('');
          
        } catch (error) {
          console.log(`   ‚ùå Error checking ${tableName}: ${error.message}`);
        }
      } else {
        console.log(`‚ö†Ô∏è  Table ${tableName} not found in database`);
      }
    }
  }

  /**
   * Ph√¢n t√≠ch mapping gi·ªØa UI fields v√† database columns
   */
  analyzeMapping() {
    console.log('\nüéØ MAPPING ANALYSIS:\n');
    
    // Tour Info Section Mapping
    console.log('üìù TOUR INFO SECTION MAPPING:');
    console.log('=' .repeat(50));
    
    const tourInfoMapping = {
      'T√™n tour': 'services.name',
      'Lo·∫°i h√¨nh': 'services.service_type',
      'Tr·∫°ng th√°i': 'services.status',
      'S·ªë ng√†y': 'service_details_tour.duration_days',
      'Qu·ªëc gia': 'service_details_tour.country',
      'ƒê·ªãa ƒëi·ªÉm': 'services.metadata.location (JSON)',
      'Gi√° c∆° b·∫£n': 'service_variants.price',
      'Lo·∫°i ti·ªÅn t·ªá': 'service_variants.currency',
      'S·ªë ng∆∞·ªùi t·ªëi thi·ªÉu': 'service_details_tour.min_participants',
      'S·ªë ng∆∞·ªùi t·ªëi ƒëa': 'service_details_tour.max_participants',
      'M√¥ t·∫£ ng·∫Øn': 'services.short_description',
      'M√¥ t·∫£ chi ti·∫øt': 'services.description',
      'L·ªãch tr√¨nh': 'service_details_tour.itinerary (JSON)'
    };
    
    Object.entries(tourInfoMapping).forEach(([field, mapping]) => {
      console.log(`  ‚úÖ ${field} ‚Üí ${mapping}`);
    });
    
    // Hotel Info Section Mapping
    console.log('\nüè® HOTEL INFO SECTION MAPPING:');
    console.log('=' .repeat(50));
    
    const hotelInfoMapping = {
      'T√™n kh√°ch s·∫°n': 'service_details_hotel.hotel_name',
      'ƒê·ªãa ch·ªâ kh√°ch s·∫°n': 'service_details_hotel.hotel_address',
      'Sao ƒë√°nh gi√°': 'service_details_hotel.star_rating',
      'Lo·∫°i ph√≤ng': 'service_details_hotel.room_type',
      'Lo·∫°i gi∆∞·ªùng': 'service_details_hotel.bed_type',
      'Di·ªán t√≠ch ph√≤ng': 'service_details_hotel.room_size',
      'S·ªë ng∆∞·ªùi t·ªëi ƒëa': 'service_details_hotel.max_occupancy',
      'Gi·ªù check-in': 'service_details_hotel.check_in_time',
      'Gi·ªù check-out': 'service_details_hotel.check_out_time',
      'Ti·ªán nghi': 'service_details_hotel.amenities (JSON)'
    };
    
    Object.entries(hotelInfoMapping).forEach(([field, mapping]) => {
      console.log(`  ‚úÖ ${field} ‚Üí ${mapping}`);
    });
    
    // Flight Info Section Mapping
    console.log('\n‚úàÔ∏è FLIGHT INFO SECTION MAPPING:');
    console.log('=' .repeat(50));
    
    const flightInfoMapping = {
      'H√£ng h√†ng kh√¥ng': 'service_details_flight.airline',
      'S·ªë hi·ªáu chuy·∫øn bay': 'service_details_flight.flight_number',
      'S√¢n bay ƒëi': 'routes.origin_airport_id ‚Üí airports.name',
      'S√¢n bay ƒë·∫øn': 'routes.dest_airport_id ‚Üí airports.name',
      'Th·ªùi gian ƒëi': 'service_availabilities.start_datetime',
      'Th·ªùi gian ƒë·∫øn': 'service_availabilities.end_datetime',
      'Lo·∫°i m√°y bay': 'service_details_flight.aircraft_type (missing)',
      'H√†nh l√Ω cho ph√©p': 'service_details_flight.baggage_allowance (missing)',
      'H·∫°ng gh·∫ø': 'service_details_flight.cabin_classes (JSON)'
    };
    
    Object.entries(flightInfoMapping).forEach(([field, mapping]) => {
      console.log(`  ‚úÖ ${field} ‚Üí ${mapping}`);
    });
  }

  /**
   * Ki·ªÉm tra c√°c tr∆∞·ªùng b·ªã thi·∫øu
   */
  checkMissingFields() {
    console.log('\n‚ö†Ô∏è  MISSING FIELDS ANALYSIS:\n');
    
    console.log('üîç Fields in UI but missing in database:');
    console.log('=' .repeat(50));
    
    const missingFields = [
      'service_details_flight.aircraft_type',
      'service_details_flight.baggage_allowance',
      'service_details_hotel.aircraft_type',
      'service_details_hotel.baggage_allowance'
    ];
    
    missingFields.forEach(field => {
      console.log(`  ‚ùå ${field} - Not found in database schema`);
    });
    
    console.log('\nüí° RECOMMENDATIONS:');
    console.log('=' .repeat(50));
    console.log('1. Add missing columns to service_details_flight table');
    console.log('2. Add missing columns to service_details_hotel table');
    console.log('3. Update API endpoints to handle new fields');
    console.log('4. Update frontend validation for new fields');
  }

  /**
   * Ki·ªÉm tra data consistency
   */
  async checkDataConsistency() {
    console.log('\nüìä DATA CONSISTENCY CHECK:\n');
    
    try {
      // Check if tour 12 exists and has related data
      const tourResult = await query('SELECT * FROM services WHERE id = 12');
      
      if (tourResult.rows.length > 0) {
        const tour = tourResult.rows[0];
        console.log('‚úÖ Tour 12 exists in services table');
        console.log(`   Name: ${tour.name}`);
        console.log(`   Type: ${tour.service_type}`);
        console.log(`   Status: ${tour.status}`);
        
        // Check tour details
        const detailsResult = await query('SELECT * FROM service_details_tour WHERE service_id = 12');
        if (detailsResult.rows.length > 0) {
          const details = detailsResult.rows[0];
          console.log('‚úÖ Tour details exist');
          console.log(`   Duration: ${details.duration_days} days`);
          console.log(`   Country: ${details.country}`);
        } else {
          console.log('‚ö†Ô∏è  No tour details found');
        }
        
        // Check variants
        const variantsResult = await query('SELECT * FROM service_variants WHERE service_id = 12');
        console.log(`‚úÖ Found ${variantsResult.rows.length} variants`);
        
        // Check images
        const imagesResult = await query('SELECT * FROM service_images WHERE service_id = 12');
        console.log(`‚úÖ Found ${imagesResult.rows.length} images`);
        
      } else {
        console.log('‚ùå Tour 12 not found in services table');
      }
      
    } catch (error) {
      console.error('‚ùå Error checking data consistency:', error.message);
    }
  }

  /**
   * Ch·∫°y ki·ªÉm tra ho√†n ch·ªânh
   */
  async runFullCheck() {
    try {
      console.log('üöÄ Starting Tour Edit Mapping Analysis...\n');
      
      await this.getAllTables();
      await this.checkTourRelatedTables();
      await this.checkHotelRelatedTables();
      await this.checkFlightRelatedTables();
      this.analyzeMapping();
      this.checkMissingFields();
      await this.checkDataConsistency();
      
      console.log('\n‚úÖ Tour Edit Mapping Analysis completed!');
      
    } catch (error) {
      console.error('‚ùå Analysis failed:', error.message);
    } finally {
      process.exit(0);
    }
  }
}

// Run analysis if this file is executed directly
if (require.main === module) {
  const checker = new TourEditMappingChecker();
  checker.runFullCheck();
}

module.exports = TourEditMappingChecker;
