const { pool } = require('./config/database');

async function checkServiceTables() {
  try {
    console.log('üîç KI·ªÇM TRA C·∫§U TR√öC V√Ä D·ªÆ LI·ªÜU C·ª¶A 2 B·∫¢NG QUAN TR·ªåNG...\n');

    // 1. KI·ªÇM TRA B·∫¢NG service_details_tour
    console.log('üìã B·∫¢NG: service_details_tour');
    console.log('‚îÅ'.repeat(50));

    // C·∫•u tr√∫c b·∫£ng
    const structureQuery = `
      SELECT column_name, data_type, is_nullable, column_default
      FROM information_schema.columns
      WHERE table_name = 'service_details_tour'
      ORDER BY ordinal_position
    `;

    const structureResult = await pool.query(structureQuery);
    console.log('üìä C·∫•u tr√∫c b·∫£ng:');
    structureResult.rows.forEach(column => {
      console.log(`  - ${column.column_name}: ${column.data_type} ${column.is_nullable === 'NO' ? 'NOT NULL' : 'NULL'} ${column.column_default ? '(default: ' + column.column_default + ')' : ''}`);
    });

    // D·ªØ li·ªáu m·∫´u
    const sampleQuery = `
      SELECT * FROM service_details_tour
      ORDER BY service_id
      LIMIT 5
    `;

    const sampleResult = await pool.query(sampleQuery);
    if (sampleResult.rows.length > 0) {
      console.log('\nüìã 5 b·∫£n ghi m·∫´u:');
      sampleResult.rows.forEach((row, index) => {
        console.log(`  ${index + 1}. Service ID: ${row.service_id}`);
        console.log(`     Duration: ${row.duration_days} days`);
        console.log(`     Country: ${row.country}`);
        console.log(`     Participants: ${row.min_participants}-${row.max_participants}`);
        console.log(`     Itinerary length: ${row.itinerary ? row.itinerary.length : 0} chars`);
        console.log('');
      });
    }

    // Th·ªëng k√™
    const statsQuery = `
      SELECT
        COUNT(*) as total_records,
        COUNT(DISTINCT service_id) as unique_services,
        COUNT(DISTINCT country) as unique_countries,
        AVG(duration_days) as avg_duration,
        MIN(duration_days) as min_duration,
        MAX(duration_days) as max_duration
      FROM service_details_tour
    `;

    const statsResult = await pool.query(statsQuery);
    const stats = statsResult.rows[0];
    console.log('üìà Th·ªëng k√™:');
    console.log(`  - T·ªïng b·∫£n ghi: ${stats.total_records}`);
    console.log(`  - S·ªë tours duy nh·∫•t: ${stats.unique_services}`);
    console.log(`  - S·ªë qu·ªëc gia: ${stats.unique_countries}`);
    console.log(`  - Th·ªùi gian trung b√¨nh: ${Math.round(stats.avg_duration * 10) / 10} ng√†y`);
    console.log(`  - Th·ªùi gian ng·∫Øn nh·∫•t: ${stats.min_duration} ng√†y`);
    console.log(`  - Th·ªùi gian d√†i nh·∫•t: ${stats.max_duration} ng√†y`);

    console.log('\n' + '='.repeat(50));

    // 2. KI·ªÇM TRA B·∫¢NG service_availabilities
    console.log('üìã B·∫¢NG: service_availabilities');
    console.log('‚îÅ'.repeat(50));

    // C·∫•u tr√∫c b·∫£ng
    const availStructureQuery = `
      SELECT column_name, data_type, is_nullable, column_default
      FROM information_schema.columns
      WHERE table_name = 'service_availabilities'
      ORDER BY ordinal_position
    `;

    const availStructureResult = await pool.query(availStructureQuery);
    console.log('üìä C·∫•u tr√∫c b·∫£ng:');
    availStructureResult.rows.forEach(column => {
      console.log(`  - ${column.column_name}: ${column.data_type} ${column.is_nullable === 'NO' ? 'NOT NULL' : 'NULL'} ${column.column_default ? '(default: ' + column.column_default + ')' : ''}`);
    });

    // D·ªØ li·ªáu m·∫´u
    const availSampleQuery = `
      SELECT sa.*, sv.name as variant_name, sv.price as variant_price
      FROM service_availabilities sa
      LEFT JOIN service_variants sv ON sa.variant_id = sv.id
      ORDER BY sa.service_id, sa.start_datetime
      LIMIT 5
    `;

    const availSampleResult = await pool.query(availSampleQuery);
    if (availSampleResult.rows.length > 0) {
      console.log('\nüìã 5 b·∫£n ghi m·∫´u:');
      availSampleResult.rows.forEach((row, index) => {
        console.log(`  ${index + 1}. Service ID: ${row.service_id}, Variant: ${row.variant_name || 'N/A'}`);
        console.log(`     Start: ${row.start_datetime}`);
        console.log(`     End: ${row.end_datetime}`);
        console.log(`     Status: ${row.status}`);
        console.log(`     Price: ${row.variant_price ? formatPrice(row.variant_price) : 'N/A'}`);
        console.log('');
      });
    }

    // Th·ªëng k√™ availabilities
    const availStatsQuery = `
      SELECT
        COUNT(*) as total_records,
        COUNT(DISTINCT service_id) as unique_services,
        COUNT(DISTINCT variant_id) as unique_variants,
        COUNT(CASE WHEN status = 'AVAILABLE' THEN 1 END) as available_count,
        COUNT(CASE WHEN status = 'BOOKED' THEN 1 END) as booked_count,
        COUNT(CASE WHEN status = 'CANCELLED' THEN 1 END) as cancelled_count
      FROM service_availabilities
    `;

    const availStatsResult = await pool.query(availStatsQuery);
    const availStats = availStatsResult.rows[0];
    console.log('üìà Th·ªëng k√™:');
    console.log(`  - T·ªïng l·ªãch tr√¨nh: ${availStats.total_records}`);
    console.log(`  - S·ªë tours c√≥ l·ªãch tr√¨nh: ${availStats.unique_services}`);
    console.log(`  - S·ªë variants c√≥ l·ªãch tr√¨nh: ${availStats.unique_variants}`);
    console.log(`  - L·ªãch tr√¨nh kh·∫£ d·ª•ng: ${availStats.available_count}`);
    console.log(`  - L·ªãch tr√¨nh ƒë√£ ƒë·∫∑t: ${availStats.booked_count}`);
    console.log(`  - L·ªãch tr√¨nh ƒë√£ h·ªßy: ${availStats.cancelled_count}`);

    // Ki·ªÉm tra l·ªãch tr√¨nh trong t∆∞∆°ng lai
    const futureQuery = `
      SELECT COUNT(*) as future_schedules
      FROM service_availabilities
      WHERE start_datetime > NOW()
    `;

    const futureResult = await pool.query(futureQuery);
    console.log(`  - L·ªãch tr√¨nh trong t∆∞∆°ng lai: ${futureResult.rows[0].future_schedules}`);

    console.log('\n‚úÖ KI·ªÇM TRA HO√ÄN T·∫§T!');

  } catch (error) {
    console.error('‚ùå L·ªói khi ki·ªÉm tra d·ªØ li·ªáu:', error);
  } finally {
    pool.end();
  }
}

function formatPrice(price) {
  if (!price) return 'N/A';
  return new Intl.NumberFormat('vi-VN', {
    style: 'currency',
    currency: 'VND'
  }).format(price);
}

checkServiceTables();
